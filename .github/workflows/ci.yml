name: CI

on:
  push:
    branches:
      - "master"
  pull_request:
    branches:
      - "*"
  workflow_dispatch:

jobs:
  unit-tests:
    name: "Python ${{ matrix.python-version }} on ${{ matrix.os }}"
    strategy:
      matrix:
        python-version:
          - "3.6"
          - "3.7"
          - "3.8"
          - "3.9"
        os:
          - ubuntu-latest
          # - macos-latest
          - windows-latest
        experimental:
          - false
        include:
          # - python-version: 3.9
          #   runs-on: windows-latest
          - python-version: 3.9
            os: macos-latest
            experimental: true
          - python-version: "3.10.0-alpha - 3.10"
            os: "ubuntu-latest"
            experimental: true
            # continue-on-error: true
          # - python-version: "pypy3"
          #   os: "ubuntu-latest"
          #   experimental: true
          #   # continue-on-error: true
          # typed-ast will never install on pypy3.7 -- https://github.com/python/typed_ast/issues/111

    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}

    steps:
      - name: "GitHub Actions Status Check"
        run: |
          echo ${{ matrix.os }}
          echo ${{ matrix.python-version }}
          echo ${{ matrix.experimental }}

      - uses: "actions/checkout@v2"

      - uses: "actions/setup-python@v2"
        with:
          python-version: "${{ matrix.python-version }}"

      # pip cache
      - uses: actions/cache@v2
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**//*-requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - uses: actions/cache@v2
        if: startsWith(runner.os, 'macOS')
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/*-requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - uses: actions/cache@v2
        if: startsWith(runner.os, 'Windows')
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/*-requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      # pip cache -- end

      - name: "Install Dependencies"
        run: |
          python -m pip install pip setuptools wheel --upgrade
          pip install -r .requirements/base.txt
          pip install -r .requirements/test.txt

      - name: "Version Check"
        run: |
          python -VV
          green --version

      - name: "Unit Tests on Python ${{ matrix.python-version }}"
        run: green colourettu.test -vv --run-coverage --termcolor

      - name: "Coverage"
        run: |
          pip install coveralls
          coveralls --verbose
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

  style-tests:
    name: "Style Tests"
    runs-on: "ubuntu-latest"
    strategy:
      matrix:
        python-version: ["3.9"]

    steps:
      - uses: "actions/checkout@v2"

      - uses: "actions/setup-python@v2"
        with:
          python-version: "${{ matrix.python-version }}"

      - name: "Install Dependencies"
        run: |
          python -m pip install pip setuptools wheel --upgrade
          pip install -r .requirements/base.txt
          pip install -r .requirements/test.txt

      - name: "Version Check"
        run: |
          python -VV
          isort --version
          pydocstyle --version
          pycodestyle --version

      - name: "Isort"
        run: isort colourettu --verbose

      - name: "Doc Style"
        continue-on-error: true
        run: pydocstyle colourettu

      - name: "Code Style"
        continue-on-error: true
        run: pycodestyle colourettu

  manifest-tests:
    name: "Check Manifest"
    runs-on: "ubuntu-latest"
    strategy:
      matrix:
        python-version: ["3.9"]

    steps:
      - uses: "actions/checkout@v2"

      - uses: "actions/setup-python@v2"
        with:
          python-version: "${{ matrix.python-version }}"

      - name: "Install Dependencies"
        run: |
          python -m pip install pip setuptools wheel --upgrade
          pip install -r .requirements/base.txt
          pip install -r .requirements/test.txt

      - name: "Version Check"
        run: |
          python -VV
          check-manifest --version

      - name: "Check Manifest"
        run: check-manifest -v

  build-docs:
    name: "Build Sphinx Documentation"
    runs-on: "ubuntu-latest"
    strategy:
      matrix:
        python-version: ["3.9"]

    steps:
      - uses: "actions/checkout@v2"

      - uses: "actions/setup-python@v2"
        with:
          python-version: "${{ matrix.python-version }}"

      - name: "Install Dependencies"
        run: |
          python -m pip install pip setuptools wheel --upgrade
          pip install .
          pip install -r .requirements/docs.txt

      - name: "Version Check"
        run: |
          python -VV
          sphinx-build --version

      - name: "Build Docs"
        run: sphinx-build -b html -d docs/_build/doctrees docs docs/_build/html


